from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QGridLayout,
    QLabel, QPushButton, QMessageBox, QFrame
)
from PyQt5.QtCore import Qt
from modulecam.camera import MainWindow as CameraMainWindow
from count.count_moudle import MainWindow as CountingMainWindow
from heatmap.heat_module import MainWindow as HeatMapMainWindow
import json
import os

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Giao Di·ªán Qu·∫£n L√Ω Camera")
        self.resize(1400, 900)  # Gi·∫£m k√≠ch th∆∞·ªõc giao di·ªán xu·ªëng

        # ƒê·∫∑t m√†u n·ªÅn v√† ki·ªÉu giao di·ªán
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f0f4f8;
            }
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #333;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border-radius: 12px;
                padding: 12px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QWidget {
                background-color: #ffffff;
                border-radius: 12px;
                padding: 20px;
                margin: 10px;
                text-align: center;
                min-width: 180px;
                max-width: 200px;  # Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc widget ƒë·ªÉ gi·ªØ giao di·ªán c√¢n ƒë·ªëi
                margin-bottom: 30px;
            }
            QGridLayout {
                spacing: 30px;
                margin: 20px;
            }
            QVBoxLayout {
                align-items: center;
                justify-content: center;
                spacing: 10px;
            }
        """)

        # Layout ch√≠nh c·ªßa giao di·ªán
        main_layout = QVBoxLayout()
        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

        # Thi·∫øt l·∫≠p Grid Layout cho c√°c ch·ª©c nƒÉng
        grid_layout = QGridLayout()
        grid_layout.setSpacing(30)

        # C√°c widget ch·ª©c nƒÉng
        self.create_function_widget(grid_layout, "Qu·∫£n L√Ω Camera", "üé•", "Qu·∫£n l√Ω v√† ƒëi·ªÅu ch·ªânh c√°c camera", self.manage_camera, 0, 0)
        self.create_function_widget(grid_layout, "ƒê·∫øm Ng∆∞·ªùi", "üë§", "ƒê·∫øm s·ªë ng∆∞·ªùi trong video", self.launch_counting_interface, 0, 1)
        self.create_function_widget(grid_layout, "Heatmap", "üå°Ô∏è", "Hi·ªÉn th·ªã heatmap t·ª´ video", self.launch_heatmap_interface, 0, 2)
        self.create_function_widget(grid_layout, "C√†i ƒê·∫∑t", "‚öôÔ∏è", "Ch·ªânh s·ª≠a c√†i ƒë·∫∑t h·ªá th·ªëng", self.settings, 1, 0)
        self.create_function_widget(grid_layout, "Tr·ª£ Gi√∫p", "‚ùì", "Cung c·∫•p th√¥ng tin tr·ª£ gi√∫p", self.help, 1, 1)
        self.create_function_widget(grid_layout, "H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng", "üìö", "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt", self.user_guide, 1, 2)
        self.create_function_widget(grid_layout, "ƒêƒÉng Xu·∫•t", "üö™", "ƒêƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng", self.logout, 2, 0)

        # ƒê·∫∑t Grid Layout v√†o Layout ch√≠nh
        main_layout.addLayout(grid_layout)

    def create_function_widget(self, layout, text, icon, description, function, row, col):
        """T·∫°o m·ªôt widget ch·ª©c nƒÉng v·ªõi icon emoji, ti√™u ƒë·ªÅ v√† m√¥ t·∫£ ng·∫Øn, s·∫Øp x·∫øp v√†o v·ªã tr√≠ trong grid"""
        widget = QWidget()
        widget_layout = QVBoxLayout()

        # Th√™m bi·ªÉu t∆∞·ª£ng emoji cho widget
        icon_label = QLabel(icon)
        icon_label.setStyleSheet("font-size: 60px; margin-bottom: 5px;")  # ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch gi·ªØa emoji v√† text

        # Th√™m ti√™u ƒë·ªÅ cho widget
        label = QLabel(text)
        label.setAlignment(Qt.AlignCenter)
        label.setStyleSheet("font-size: 18px; font-weight: bold; color: #4CAF50;")

        # Th√™m m√¥ t·∫£ cho widget
        description_label = QLabel(description)
        description_label.setAlignment(Qt.AlignCenter)
        description_label.setStyleSheet("font-size: 12px; color: #666; margin-top: 5px;")

        # Th√™m n√∫t b·∫•m ƒë·ªÉ k√≠ch ho·∫°t ch·ª©c nƒÉng
  
        button = QPushButton("Ch·ªçn")
        if text == "ƒê·∫øm Ng∆∞·ªùi":
            button.clicked.connect(self.launch_counting_interface)  # Connect to new method
            
        elif text == "Heatmap":
            button.clicked.connect(self.launch_heatmap_interface)
        else:
            button.clicked.connect(function)


        # Set layout for the widget
        widget_layout.addWidget(icon_label)
        widget_layout.addWidget(label)
        widget_layout.addWidget(description_label)
        widget_layout.addWidget(button)
        widget.setLayout(widget_layout)

        # Add widget to grid layout at position (row, col)
        layout.addWidget(widget, row, col)
        
    def manage_camera(self):
        """Launch the full camera management interface"""
        self.camera_window = CameraMainWindow(main_window=self)  # Pass main window reference
        self.camera_window.show()  # Show the camera management window
        self.hide()
    def load_camera_list(self):
        """Load camera list from JSON file"""
        try:
            if os.path.exists('modulecam/camera_list.json'):
                with open('modulecam/camera_list.json', 'r') as f:
                    return json.load(f)
            return []
        except Exception as e:
            QMessageBox.warning(self, "Warning", f"Error loading camera list: {str(e)}")
            return []

    def save_camera_list(self, cameras):
        """Save updated camera list to JSON file"""
        try:
            with open('modulecam/camera_list.json', 'w') as f:
                json.dump(cameras, f, indent=4)
        except Exception as e:
            QMessageBox.warning(self, "Warning", f"Error saving camera list: {str(e)}")

    def launch_counting_interface(self):
        """Launch the full counting interface"""
        self.counting_window = CountingMainWindow(main_window=self)  # Pass main window reference
        self.counting_window.show()  # Show the counting window
        self.hide()  # Hide the main window

    def launch_heatmap_interface(self):
        """Launch the full heatmap interface"""
        self.heatmap_window = HeatMapMainWindow(main_window=self)  # Pass main window reference
        self.heatmap_window.show()  # Show the heatmap window
        self.hide()
    def settings(self):
        """Ch·ª©c nƒÉng c√†i ƒë·∫∑t"""
        print("C√†i ƒê·∫∑t")

    def help(self):
        """Ch·ª©c nƒÉng tr·ª£ gi√∫p"""
        print("Tr·ª£ Gi√∫p")

    def user_guide(self):
        """Ch·ª©c nƒÉng h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
        print("H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")

    def logout(self):
        """Ch·ª©c nƒÉng ƒëƒÉng xu·∫•t"""
        print("ƒêƒÉng Xu·∫•t")

if __name__ == '__main__':
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec_()